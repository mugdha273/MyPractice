```

void findTopoSort(int node, vector<int> &vis, stack<int> &st, vector<int> adj[])
{
  vis[node] = 1
  
  for(auto it: adj[node])
  {
      if(!vis[it]
      {
        findTopoSort(it, vis, st, adj);
      }
  }
  
  st.push(node);

}

void shortestPath(int src, int N, vector<int>adj[])
{
  stack<int> st;
  vector<int> vis(N,0);
  
  for(int i=0; i<N; i++)
  {
      if(vis[i] == 0)
      {
          findTopoSort(i, vis, st, adj);
      }
  }
  
  int dist[N];
  for(int i=0; i<N; i++)
  {
    dist[i]= 1e9;
  }
  
  dist[src]=0;
  
  vector<int> topo;
  while(!st.empty())
  {
    int node= st.top();
    st.pop();
    
    if(dist[node] !=INF)
    {
      for(auto it: adj[node]
      {
        if(dist[node] + it.second < dist[it.first])
        {
          dist[it.first] = dist[node] + it.second; 
        }
      }
    }
    
  }
  
  for (int i = 0; i < N; i++) 
		(dist[i] == 1e9)? cout << "INF ": cout << dist[i] << " ";
}




```
